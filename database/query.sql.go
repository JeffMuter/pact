// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
)

const createConnection = `-- name: CreateConnection :exec
INSERT INTO connections (manager_id, worker_id) VALUES (?, ?)
`

type CreateConnectionParams struct {
	ManagerID int64
	WorkerID  int64
}

func (q *Queries) CreateConnection(ctx context.Context, arg CreateConnectionParams) error {
	_, err := q.db.ExecContext(ctx, createConnection, arg.ManagerID, arg.WorkerID)
	return err
}

const createRequest = `-- name: CreateRequest :exec
INSERT INTO connection_requests (sender_id, reciever_id, suggested_manager_id, suggested_worker_id) VALUES (?, ?, ?, ?)
`

type CreateRequestParams struct {
	SenderID           int64
	RecieverID         int64
	SuggestedManagerID int64
	SuggestedWorkerID  int64
}

func (q *Queries) CreateRequest(ctx context.Context, arg CreateRequestParams) error {
	_, err := q.db.ExecContext(ctx, createRequest,
		arg.SenderID,
		arg.RecieverID,
		arg.SuggestedManagerID,
		arg.SuggestedWorkerID,
	)
	return err
}

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions(user_id, token, created_at, expires_at) VALUES(?, ?, ?, ?)
`

type CreateSessionParams struct {
	UserID    int64
	Token     string
	CreatedAt string
	ExpiresAt string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession,
		arg.UserID,
		arg.Token,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, username, password_hash) VALUES (?, ?, ?) returning user_id
`

type CreateUserParams struct {
	Email        string
	Username     string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Username, arg.PasswordHash)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const deleteConnectionRequestByUserIds = `-- name: DeleteConnectionRequestByUserIds :exec
DELETE FROM connection_requests WHERE sender_id = ? AND reciever_id = ?
`

type DeleteConnectionRequestByUserIdsParams struct {
	SenderID   int64
	RecieverID int64
}

func (q *Queries) DeleteConnectionRequestByUserIds(ctx context.Context, arg DeleteConnectionRequestByUserIdsParams) error {
	_, err := q.db.ExecContext(ctx, deleteConnectionRequestByUserIds, arg.SenderID, arg.RecieverID)
	return err
}

const getActiveConnectionDetails = `-- name: GetActiveConnectionDetails :one
SELECT worker_id, manager_id
FROM connections
WHERE connection_id = ?
`

type GetActiveConnectionDetailsRow struct {
	WorkerID  int64
	ManagerID int64
}

func (q *Queries) GetActiveConnectionDetails(ctx context.Context, connectionID int64) (GetActiveConnectionDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, getActiveConnectionDetails, connectionID)
	var i GetActiveConnectionDetailsRow
	err := row.Scan(&i.WorkerID, &i.ManagerID)
	return i, err
}

const getActiveConnectionId = `-- name: GetActiveConnectionId :one
SELECT active_connection_id
FROM users
WHERE user_id= ?
`

func (q *Queries) GetActiveConnectionId(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getActiveConnectionId, userID)
	var active_connection_id int64
	err := row.Scan(&active_connection_id)
	return active_connection_id, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT user_id, email, username, password_hash, active_connection_id, is_member, points, created_at FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Email,
			&i.Username,
			&i.PasswordHash,
			&i.ActiveConnectionID,
			&i.IsMember,
			&i.Points,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConnectionsById = `-- name: GetConnectionsById :many
SELECT 
    c.connection_id,
    c.manager_id,
    m.username AS manager_username,
    c.worker_id,
    w.username AS worker_username
FROM connections c
JOIN users m ON c.manager_id = m.user_id
JOIN users w ON c.worker_id = w.user_id
WHERE ? IN (c.manager_id, c.worker_id)
`

type GetConnectionsByIdRow struct {
	ConnectionID    int64
	ManagerID       int64
	ManagerUsername string
	WorkerID        int64
	WorkerUsername  string
}

func (q *Queries) GetConnectionsById(ctx context.Context, managerID int64) ([]GetConnectionsByIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getConnectionsById, managerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetConnectionsByIdRow
	for rows.Next() {
		var i GetConnectionsByIdRow
		if err := rows.Scan(
			&i.ConnectionID,
			&i.ManagerID,
			&i.ManagerUsername,
			&i.WorkerID,
			&i.WorkerUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, email, username, password_hash, active_connection_id, is_member, points, created_at FROM users WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.ActiveConnectionID,
		&i.IsMember,
		&i.Points,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT user_id, email, username, password_hash, active_connection_id, is_member, points, created_at from users WHERE user_id = ?
`

func (q *Queries) GetUserById(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.ActiveConnectionID,
		&i.IsMember,
		&i.Points,
		&i.CreatedAt,
	)
	return i, err
}

const getUserPendingRequests = `-- name: GetUserPendingRequests :many
SELECT connection_requests.request_id, users.email, connection_requests.sender_id, connection_requests.reciever_id, connection_requests.suggested_manager_id, connection_requests.suggested_worker_id
FROM connection_requests
JOIN users ON connection_requests.sender_id = users.user_id
WHERE connection_requests.is_active = 1
AND connection_requests.reciever_id = ?
`

type GetUserPendingRequestsRow struct {
	RequestID          int64
	Email              string
	SenderID           int64
	RecieverID         int64
	SuggestedManagerID int64
	SuggestedWorkerID  int64
}

func (q *Queries) GetUserPendingRequests(ctx context.Context, recieverID int64) ([]GetUserPendingRequestsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserPendingRequests, recieverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserPendingRequestsRow
	for rows.Next() {
		var i GetUserPendingRequestsRow
		if err := rows.Scan(
			&i.RequestID,
			&i.Email,
			&i.SenderID,
			&i.RecieverID,
			&i.SuggestedManagerID,
			&i.SuggestedWorkerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsernameByUserId = `-- name: GetUsernameByUserId :one
SELECT username FROM users WHERE user_id = ?
`

func (q *Queries) GetUsernameByUserId(ctx context.Context, userID int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getUsernameByUserId, userID)
	var username string
	err := row.Scan(&username)
	return username, err
}

const updateActiveConnection = `-- name: UpdateActiveConnection :exec
UPDATE users SET active_connection_id = ?
`

func (q *Queries) UpdateActiveConnection(ctx context.Context, activeConnectionID int64) error {
	_, err := q.db.ExecContext(ctx, updateActiveConnection, activeConnectionID)
	return err
}

const userIsMemberById = `-- name: UserIsMemberById :one
SELECT is_member FROM users WHERE user_id = ?
`

func (q *Queries) UserIsMemberById(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, userIsMemberById, userID)
	var is_member int64
	err := row.Scan(&is_member)
	return is_member, err
}
