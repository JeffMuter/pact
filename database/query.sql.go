// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
)

const getAllUsers = `-- name: GetAllUsers :many
select user_id, email, username, password_hash, role, is_member, points, created_at from users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Email,
			&i.Username,
			&i.PasswordHash,
			&i.Role,
			&i.IsMember,
			&i.Points,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, email, username, password_hash, role, is_member, points, created_at FROM users WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.IsMember,
		&i.Points,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT user_id, email, username, password_hash, role, is_member, points, created_at from users WHERE user_id = ?
`

func (q *Queries) GetUserById(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.IsMember,
		&i.Points,
		&i.CreatedAt,
	)
	return i, err
}

const userIsMemberById = `-- name: UserIsMemberById :one
SELECT is_member FROM users WHERE user_id = ?
`

func (q *Queries) UserIsMemberById(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, userIsMemberById, userID)
	var is_member int64
	err := row.Scan(&is_member)
	return is_member, err
}
